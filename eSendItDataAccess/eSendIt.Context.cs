//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace eSendItDataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class eSendItEntities : DbContext
    {
        public eSendItEntities()
            : base("name=eSendItEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AdvertiserGroup> AdvertiserGroups { get; set; }
        public virtual DbSet<Agency> Agencies { get; set; }
        public virtual DbSet<Audio> Audios { get; set; }
        public virtual DbSet<AudioType> AudioTypes { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<ChannelApprover> ChannelApprovers { get; set; }
        public virtual DbSet<ChannelApproverUser> ChannelApproverUsers { get; set; }
        public virtual DbSet<Channel> Channels { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DestinationVersion> DestinationVersions { get; set; }
        public virtual DbSet<FormatType> FormatTypes { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceEmail> InvoiceEmails { get; set; }
        public virtual DbSet<InvoiceExpenseTemplate> InvoiceExpenseTemplates { get; set; }
        public virtual DbSet<InvoiceItemDetail> InvoiceItemDetails { get; set; }
        public virtual DbSet<InvoicePayment> InvoicePayments { get; set; }
        public virtual DbSet<InvoiceProduct> InvoiceProducts { get; set; }
        public virtual DbSet<LanguageType> LanguageTypes { get; set; }
        public virtual DbSet<LeftMenu> LeftMenus { get; set; }
        public virtual DbSet<Medium> Media { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<Production> Productions { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectMenu> ProjectMenus { get; set; }
        public virtual DbSet<ProjectSetting> ProjectSettings { get; set; }
        public virtual DbSet<ProjectVersionApproval> ProjectVersionApprovals { get; set; }
        public virtual DbSet<Sector> Sectors { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<UserGroupLeftMenu> UserGroupLeftMenus { get; set; }
        public virtual DbSet<UserGroupMenu> UserGroupMenus { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Version> Versions { get; set; }
        public virtual DbSet<Common> Commons { get; set; }
        public virtual DbSet<Destination> Destinations { get; set; }
        public virtual DbSet<DestinationVersionHistory> DestinationVersionHistories { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<QcProperty> QcProperties { get; set; }
        public virtual DbSet<QcPropertyCheck> QcPropertyChecks { get; set; }
        public virtual DbSet<VersionFileQcCheck> VersionFileQcChecks { get; set; }
    
        public virtual ObjectResult<Nullable<int>> uspDestinationVersionSave(string xML, Nullable<long> projectId, Nullable<long> accountId, Nullable<long> userID)
        {
            var xMLParameter = xML != null ?
                new ObjectParameter("XML", xML) :
                new ObjectParameter("XML", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(long));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("accountId", accountId) :
                new ObjectParameter("accountId", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDestinationVersionSave", xMLParameter, projectIdParameter, accountIdParameter, userIDParameter);
        }
    
        public virtual int uspQcCheckVersion(string xML, Nullable<long> versionId, Nullable<int> userID)
        {
            var xMLParameter = xML != null ?
                new ObjectParameter("XML", xML) :
                new ObjectParameter("XML", typeof(string));
    
            var versionIdParameter = versionId.HasValue ?
                new ObjectParameter("versionId", versionId) :
                new ObjectParameter("versionId", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspQcCheckVersion", xMLParameter, versionIdParameter, userIDParameter);
        }
    }
}
